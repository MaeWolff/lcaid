<header class="flex flex-col gap-4">
  <div class="flex flex-col gap-1">
    <p class="text-[12px] text-neutral-mid-grey">
      <a href="{{  product.collections[0].url }}" class="link-underline"> {{ product.collections[0].title }}</a> >
      {{ product.category | capitalize }}
    </p>
    <h1 class="text-[16px] font-medium">{% render 'title-case', title: product.title %}</h1>
    <p class="text-neutral-mid-grey">{{ product.price | money }}</p>
  </div>

  <h2>{{ product.metafields.custom.short_description }}</h2>
</header>

<div x-data="productForm()" class="flex flex-col gap-4">
  <div
    class="border border-neutral-light-grey"
    :class="{ 'divide-y divide-neutral-light-grey': [hasSize, hasColor, hasMaterial].filter(Boolean).length > 0 }"
  >
    {% render 'product-page-sizes-drawer' %}
    {% render 'product-page-colors-drawer' %}
    {% render 'product-page-tissus-drawer' %}
  </div>

  <div class="flex w-full flex-row justify-between gap-6 text-neutral-mid-grey">
    <p>{{ product.metafields.custom.model_size }}</p>
    {% render 'product-page-sizing-guide-drawer' %}
  </div>

  <form action="/cart/add" method="post" class="mt-5">
    <input type="hidden" name="id" :value="selectedVariantId">
    <button
      type="submit"
      :disabled="isButtonDisabled()"
      class="btn-primary w-full"
    >
      {{ 'cart.add' | t }}
    </button>
  </form>
</div>

<script>
  function productForm() {
    return {
      hasSize: false,
      hasColor: false,
      hasMaterial: false,
      sizes: [],
      colors: [],
      materials: [],
      variants: {{ product.variants | json }},

      selectedSize: null,
      selectedColor: null,
      selectedMaterial: null,
      selectedVariantId: '{{ product.selected_or_first_available_variant.id }}',

      init() {
        const options = {{ product.options_with_values | json }};
        const colorMeta = {{ product.metafields.shopify.color-pattern.value | json }};
        const defaultVariant = {{ product.selected_or_first_available_variant | json }};
        
        options.forEach((option, index) => {
          const position = index + 1;
          
          if (option.name === 'Size' || option.name === "Taille") {
            this.hasSize = true;
            this.sizes = option.values;
            this.optionPositions = this.optionPositions || {};
            this.optionPositions.size = position;
            
            if (defaultVariant && defaultVariant[`option${position}`]) {
              this.selectedSize = defaultVariant[`option${position}`];
            }
          }

          if (option.name === 'Couleur' || option.name === "Color") {
            this.hasColor = true;
            this.colors = option.values.map(colorName => {
              let colorObj = colorMeta ? colorMeta.find(c => c.label === colorName) : null;
              return {
                name: colorName,
                hex: colorObj ? colorObj.color : '#000000'
              };
            });
            
            this.optionPositions = this.optionPositions || {};
            this.optionPositions.color = position;
            
            if (defaultVariant && defaultVariant[`option${position}`]) {
              const defaultColorName = defaultVariant[`option${position}`];
              this.selectedColor = this.colors.find(c => c.name === defaultColorName);
            }
          }

          if (option.name === 'Clothing accessory material') {
            this.hasMaterial = true;
            this.materials = option.values;
            
            this.optionPositions = this.optionPositions || {};
            this.optionPositions.material = position;
            
            if (defaultVariant && defaultVariant[`option${position}`]) {
              this.selectedMaterial = defaultVariant[`option${position}`];
            }
          }
        });

        this.updateVariant();
      },

      selectSize(size) {
        this.selectedSize = size;
        this.updateVariant();
      },

      selectColor(color) {
        this.selectedColor = color;
        this.updateVariant();
      },

      selectMaterial(material) {
        this.selectedMaterial = material;
        this.updateVariant();
      },

      updateVariant() {    
        if (!this.optionPositions) {
          console.error('Positions des options non dÃ©finies');
          return;
        }
        
        const variant = this.variants.find(v => {
          let isMatch = true;
          
          if (this.hasSize && this.optionPositions.size) {
            const sizeMatch = v[`option${this.optionPositions.size}`] === this.selectedSize;
            isMatch = isMatch && sizeMatch;
          }
          
          if (this.hasColor && this.optionPositions.color) {
            const colorName = typeof this.selectedColor === 'string' ? this.selectedColor : this.selectedColor?.name;
            const colorMatch = v[`option${this.optionPositions.color}`] === colorName;
            isMatch = isMatch && colorMatch;
          }
          
          if (this.hasMaterial && this.optionPositions.material) {
            const materialMatch = v[`option${this.optionPositions.material}`] === this.selectedMaterial;
            isMatch = isMatch && materialMatch;
          }
          
          return isMatch;
        });
        
        this.selectedVariantId = variant ? variant.id : null;
      },

      isButtonDisabled() {
        let isDisabled = false;
        
        if (this.hasColor) {
          isDisabled = isDisabled || !this.selectedColor;
        }
        
        if (this.hasSize) {
          isDisabled = isDisabled || !this.selectedSize;
        }
        
        if (this.hasMaterial) {
          isDisabled = isDisabled || !this.selectedMaterial;
        }   
        
        isDisabled = isDisabled || !this.selectedVariantId;
          
        return isDisabled;
      },
    };
  }

  document.addEventListener('DOMContentLoaded', () => {
    productForm().init();
  });
</script>
