<section class="flex w-screen flex-col items-center justify-center gap-10 py-16 gutter-px-1">
  <h2 class="text-[16px] font-semibold">Complete the look</h2>

  <div x-data="recommendedProducts({{ product.id }})" class="mx-auto flex w-full flex-col gap-9">
    <div class="mx-auto w-[90%]">
      <template x-if="products.length > 0">
        <div class="grid w-full grid-cols-2 gap-4 lg:grid-cols-3">
          <template x-for="product in products" :key="product.id">
            <a :href="product.url" class="group flex flex-col gap-1">
              <img
                class="aspect-square h-full w-full object-cover"
                :src="product.featured_image"
                :alt="product.title"
                width="100%"
                height="100%"
              >

              <div class="mt-3 flex w-full flex-col items-center gap-1">
                <p class="font-semibold" x-text="product.title"></p>
                <div class="flex flex-row gap-2 text-[12px] text-neutral-mid-grey">
                  <p class="line-through" x-show="product.compare_at_price" x-text="product.compare_at_price"></p>
                  <p x-text="product.price"></p>
                </div>
              </div>
            </a>
          </template>
        </div>
      </template>

      <p x-show="products.length === 0" class="text-center text-neutral-mid-grey">No recommendations available</p>
    </div>
  </div>
</section>

<script>
  function recommendedProducts(productId) {
    return {
      products: [],

      init() {
        fetch(`/recommendations/products.json?product_id=${productId}&limit=3`)
          .then((response) => response.json())
          .then((data) => {
            if (data && data.products.length > 0) {
              this.products = data.products.map((product) => ({
                ...product,
                price: this.formatPrice(product.price),
                compare_at_price: product.compare_at_price ? this.formatPrice(product.compare_at_price) : null,
              }));
            }
          })
          .catch((error) => {
            console.error('Error fetching recommendations:', error);
          });
      },

      formatPrice(price) {
        const currencySymbol = '{{ cart.currency.symbol }}';
        return (
          currencySymbol +
          new Intl.NumberFormat('fr-FR', {
            style: 'decimal',
            minimumFractionDigits: 2,
          }).format(price / 100)
        );
      },
    };
  }
</script>
