{% assign current_variant = product.selected_or_first_available_variant %}
{% assign featured_image = current_variant.featured_image | default: product.featured_image %}

<div class="relative mt-[calc(var(--header-height)_+_1rem)] grid w-full grid-cols-1 gap-4 margin-px-1 lg:grid-cols-[1fr_0.7fr] lg:gap-16">
  <section
    id="product-images"
    x-data="
      {
        currentSlide: 0,
        images: [
          {% for image in product.images %}
            '{{ image | image_url }}',
          {% endfor %}
        ],
        touchStartX: 0,
        touchEndX: 0,

        handleTouchStart(e) {
          this.touchStartX = e.touches[0].clientX;
        },

        handleTouchMove(e) {
          this.touchEndX = e.touches[0].clientX;
        },

        handleTouchEnd() {
          const diffX = this.touchStartX - this.touchEndX;
          const threshold = 50;

          if (Math.abs(diffX) > threshold) {
            if (diffX > 0 && this.currentSlide < this.images.length - 1) {
              this.currentSlide++;
            } else if (diffX < 0 && this.currentSlide > 0) {
              this.currentSlide--;
            }
          }
        }
      }
    "
    class="relative grid grid-cols-1"
  >
    <a
      href="#complete-the-look"
      id="sticky-text"
      class="fixed bottom-10 left-1/2 flex -translate-x-1/2 items-center justify-center gap-4 bg-white p-4 opacity-100 shadow-lg transition-opacity duration-300 lg:left-1/4 lg:-translate-x-1/4"
    >
      <img
        class="aspect-square h-[32px] w-[32px] object-cover object-top"
        src="{{ product.images[0]  | image_url: width: 56, height: 56 }}"
        width="32px"
        height="32px"
      >
      <p>Complete the look</p>
    </a>

    {% render 'product-page-slider-mobile' %}

    <div class="hidden lg:grid lg:grid-cols-1">
      {% for image in product.images %}
        <img
          class="aspect-square h-full w-full bg-neutral-light-grey object-cover object-center"
          src="{{ image  | image_url }}"
          alt="{{ image.alt | escape }}"
          width="100%"
          height="100%"
        >
      {% endfor %}
    </div>
  </section>

  <section class="sticky top-[var(--header-height)] flex h-max flex-col gap-8">
    {% render 'product-page-details' %}
    {% render 'product-page-accordions' %}
  </section>
</div>

{% render 'product-page-complete-the-look' %}

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const text = document.getElementById('sticky-text');
    const section = document.getElementById('product-images');

    const sentinel = document.createElement('div');
    sentinel.style.position = 'absolute';
    sentinel.style.bottom = '0px';
    sentinel.style.width = '100%';
    sentinel.style.height = '1px';
    section.appendChild(sentinel);

    let textHidden = false;

    const observer = new IntersectionObserver(
      ([entry]) => {
        const sectionRect = section.getBoundingClientRect();
        const textRect = text.getBoundingClientRect();

        if (entry.isIntersecting && !textHidden) {
          text.classList.add('hidden');
          textHidden = true;
        }

        if (!entry.isIntersecting && textHidden) {
          const textBottom = textRect.bottom;
          const sectionBottom = sectionRect.bottom;

          if (textBottom < sectionBottom) {
            text.classList.remove('hidden');
            textHidden = false;
          }
        }
      },
      { root: null, threshold: 1 },
    );

    observer.observe(sentinel);
  });
</script>
